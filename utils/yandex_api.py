import requests
import urllib.parse
import xml.etree.ElementTree as ET
import urllib3
from utils.config import YANDEX_API_KEY, YANDEX_FOLDER_ID

# –û—Ç–∫–ª—é—á–∞–µ–º SSL Warning
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

YANDEX_IMAGE_API_URL = "https://yandex.com/images-xml"

def get_yandex_image_api(place_name, city):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ API –Ø–Ω–¥–µ–∫—Å–∞ (—Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –≥–æ—Ä–æ–¥)"""
    query = f"{place_name}, {city} + '—Ñ–æ—Ç–æ' "  # –ë–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤

    params = {
        "folderid": YANDEX_FOLDER_ID,
        "apikey": YANDEX_API_KEY,
        "text": query,
        "itype": "jpg,png",
        "isize": "large",
        "iorient": "horizontal"
    }

    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    full_url = f"{YANDEX_IMAGE_API_URL}?{'&'.join([f'{k}={v}' for k, v in params.items()])}"
    print(f"üîç –ó–∞–ø—Ä–æ—Å –∫ API –Ø–Ω–¥–µ–∫—Å–∞: {full_url}")

    response = requests.get(YANDEX_IMAGE_API_URL, params=params, verify=False)

    if response.status_code != 200:
        print(f"‚ö† –û—à–∏–±–∫–∞ API –Ø–Ω–¥–µ–∫—Å–∞: {response.status_code} - {response.text}")
        return None

    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º XML-–æ—Ç–≤–µ—Ç
        root = ET.fromstring(response.text)

        best_image = None
        best_size = 0

        for doc in root.findall(".//doc"):
            img_url_element = doc.find(".//url")
            image_link_element = doc.find(".//image-properties/image-link")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º `<url>`, –µ—Å–ª–∏ –æ–Ω–æ –≤–µ–¥—ë—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img_url = img_url_element.text if img_url_element is not None and (".jpg" in img_url_element.text or ".png" in img_url_element.text) else None
            img_link = image_link_element.text if image_link_element is not None else None

            final_img = img_url if img_url else img_link

            width = doc.find(".//image-properties/original-width")
            height = doc.find(".//image-properties/original-height")

            if final_img and width is not None and height is not None:
                img_width = int(width.text)
                img_height = int(height.text)
                img_size = img_width * img_height

                # –í—ã–±–∏—Ä–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if img_size > best_size:
                    best_image = final_img
                    best_size = img_size

        if best_image:
            print(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {best_image}")
            return best_image

        print("‚ö† API –Ω–µ –≤–µ—Ä–Ω—É–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
        return None

    except ET.ParseError:
        print(f"‚ö† –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ XML-–æ—Ç–≤–µ—Ç–∞ –Ø–Ω–¥–µ–∫—Å–∞. –û—Ç–≤–µ—Ç API:\n{response.text}")
        return None

