import openai
import urllib.parse
import requests
from aiogram import Router, types
from magic_filter import F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from utils.config import OPENAI_API_KEY
from utils.yandex_api import get_yandex_image_api  # –ü–æ–¥–∫–ª—é—á–∞–µ–º API –Ø–Ω–¥–µ–∫—Å–∞

router = Router()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º OpenAI
openai.api_key = OPENAI_API_KEY

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
class PlacesState(StatesGroup):
    waiting_for_city = State()

def generate_google_maps_link(place_name, city):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ Google Maps –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Å—Ç–∞"""
    query = f"{place_name}, {city}"
    encoded_query = urllib.parse.quote(query)
    return f"https://www.google.com/maps/search/?api=1&query={encoded_query}"

def is_image_accessible(url):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
    try:
        response = requests.head(url, timeout=5)
        return response.status_code == 200
    except requests.RequestException:
        return False

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìç –ß—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å"
@router.message(F.text == "üìç –ß—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å")
async def ask_city(message: types.Message, state: FSMContext):
    await message.answer("üèô –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    await state.set_state(PlacesState.waiting_for_city)

# üìå –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –∏ –¥–∞—ë–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å —Ç–æ—á–Ω—ã–º –ø–æ–∏—Å–∫–æ–º —Ñ–æ—Ç–æ
@router.message(PlacesState.waiting_for_city)
async def get_places(message: types.Message, state: FSMContext):
    city = message.text.strip()

    await message.answer(f"üîç –ò—â—É –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ **{city}**...")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ OpenAI
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã - —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –≥–∏–¥. –°–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ 5 –ª—É—á—à–∏—Ö –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ. "
                                              "–î–ª—è –∫–∞–∂–¥–æ–π –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–ø–∏—à–∏ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ."},
                {"role": "user", "content": f"–†–∞—Å—Å–∫–∞–∂–∏ –æ –≥–ª–∞–≤–Ω—ã—Ö –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö –≤ {city}."}
            ]
        )

        answer = response["choices"][0]["message"]["content"]

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
        places = answer.split("\n")
        for place in places:
            if place.strip():
                place_name = place.split("**")[1] if "**" in place else place  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
                google_maps_link = generate_google_maps_link(place_name, city)
                image_url = get_yandex_image_api(place_name, city)  # –¢–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ API –Ø–Ω–¥–µ–∫—Å–∞

                if image_url and is_image_accessible(image_url):
                    print(f"üì∏ –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_url}")  # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
                    await message.answer_photo(
                        photo=image_url,
                        caption=f"{place}\n\nüìç [Google Maps]({google_maps_link})",
                        parse_mode="Markdown", disable_web_page_preview=True
                    )
                else:
                    print(f"‚ö† Telegram –Ω–µ —Å–º–æ–≥ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É: {image_url}")
                    await message.answer(
                        f"{place}\n\nüìç [Google Maps]({google_maps_link})\nüåç [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ]({image_url})",
                        parse_mode="Markdown"
                    )

    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ OpenAI: {e}")
        await message.answer("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
