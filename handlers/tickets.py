import logging
from aiogram import Router, types
from magic_filter import F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from utils.scraper import search_flights  # –ò–º–ø–æ—Ä—Ç –ø–∞—Ä—Å–µ—Ä–∞

router = Router()

class TicketSearchState(StatesGroup):
    waiting_for_origin = State()
    waiting_for_destination = State()
    waiting_for_departure_date = State()
    waiting_for_return_date = State()

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚úà –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã"
@router.message(F.text == "‚úà –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã")
async def ask_origin(message: types.Message, state: FSMContext):
    await message.answer("üõ´ –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞):")
    await state.set_state(TicketSearchState.waiting_for_origin)

# üìå –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞
@router.message(TicketSearchState.waiting_for_origin)
async def get_origin(message: types.Message, state: FSMContext):
    await state.update_data(origin=message.text)
    await message.answer("‚úà –í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É (–∏–ª–∏ –≥–æ—Ä–æ–¥) –ø—Ä–∏–ª—ë—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –õ–æ–Ω–¥–æ–Ω):")
    await state.set_state(TicketSearchState.waiting_for_destination)

# üìå –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω—É –ø—Ä–∏–ª—ë—Ç–∞
@router.message(TicketSearchState.waiting_for_destination)
async def get_destination(message: types.Message, state: FSMContext):
    await state.update_data(destination=message.text)
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ª–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ **–î–î-–ú–ú-–ì–ì–ì–ì** (–Ω–∞–ø—Ä–∏–º–µ—Ä: 23-06-2025):")
    await state.set_state(TicketSearchState.waiting_for_departure_date)

# üìå –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –≤—ã–ª–µ—Ç–∞
@router.message(TicketSearchState.waiting_for_departure_date)
async def get_departure_date(message: types.Message, state: FSMContext):
    await state.update_data(departure_date=message.text)
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–±—Ä–∞—Ç–Ω–æ–≥–æ —Ä–µ–π—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ **–î–î-–ú–ú-–ì–ì–ì–ì** (–∏–ª–∏ '–Ω–µ—Ç', –µ—Å–ª–∏ –≤ –æ–¥–∏–Ω –∫–æ–Ω–µ—Ü):")
    await state.set_state(TicketSearchState.waiting_for_return_date)

# üìå –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –æ–±—Ä–∞—Ç–Ω–æ–≥–æ —Ä–µ–π—Å–∞ –∏ –¥–∞—ë–º —Å—Å—ã–ª–∫–∏
@router.message(TicketSearchState.waiting_for_return_date)
async def get_return_date(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    origin = user_data['origin']
    destination = user_data['destination']
    departure_date = user_data['departure_date']
    return_date = message.text if message.text.lower() != "–Ω–µ—Ç" else None

    await message.answer(f"üîç –ò—â—É –±–∏–ª–µ—Ç—ã –∏–∑ **{origin}** –≤ **{destination}**\n"
                         f"üìÖ –î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞: {departure_date}\n"
                         f"üìÖ –î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {return_date if return_date else '–ë–µ–∑ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞'}")

    # –ü–∞—Ä—Å–∏–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–∏–ª–µ—Ç—ã
    flight_links = search_flights(origin, destination, departure_date, return_date)

    result = (
        f"‚úÖ –ù–∞–π–¥–µ–Ω–æ!\n"
        f"[üõ´ Aviasales]({flight_links['Aviasales']})\n"
        f"[üõ© OneTwoTrip]({flight_links['OneTwoTrip']})"
    )

    await message.answer(result, parse_mode="Markdown", disable_web_page_preview=True)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
