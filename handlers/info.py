import openai
import urllib.parse
import requests
from aiogram import Router, types
from magic_filter import F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from utils.config import OPENAI_API_KEY
from utils.yandex_api import get_yandex_image_api  # –ü–æ–¥–∫–ª—é—á–∞–µ–º API –Ø–Ω–¥–µ–∫—Å–∞

router = Router()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º OpenAI
openai.api_key = OPENAI_API_KEY

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
class CountryInfoState(StatesGroup):
    waiting_for_country = State()

def is_image_accessible(url):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
    try:
        response = requests.head(url, timeout=5)
        return response.status_code == 200
    except requests.RequestException:
        return False

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üåç –£–∑–Ω–∞—Ç—å –æ —Å—Ç—Ä–∞–Ω–µ"
@router.message(F.text == "üó∫ –£–∑–Ω–∞—Ç—å –æ —Å—Ç—Ä–∞–Ω–µ/–≥–æ—Ä–æ–¥–µ")
async def ask_country(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –∏–ª–∏ –≥–æ—Ä–æ–¥–∞, –æ –∫–æ—Ç–æ—Ä–æ–π/–æ–º —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å:")
    await state.set_state(CountryInfoState.waiting_for_country)

# üìå –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ —Å—Ç—Ä–∞–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é + —Ñ–æ—Ç–æ
@router.message(CountryInfoState.waiting_for_country)
async def get_country_info(message: types.Message, state: FSMContext):
    country = message.text.strip()

    await message.answer(f"üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ **{country}**...")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ OpenAI
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å—Ç—Ä–∞–Ω–∞–º. –†–∞—Å—Å–∫–∞–∂–∏ –∫—Ä–∞—Ç–∫–æ –æ–± —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–µ: —Å—Ç–æ–ª–∏—Ü–∞, –Ω–∞—Å–µ–ª–µ–Ω–∏–µ, —è–∑—ã–∫, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã, –≤–∞–ª—é—Ç–∞."},
                {"role": "user", "content": f"–†–∞—Å—Å–∫–∞–∂–∏ –∫—Ä–∞—Ç–∫–æ –æ —Å—Ç—Ä–∞–Ω–µ {country}."}
            ]
        )

        answer = response["choices"][0]["message"]["content"]

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ API –Ø–Ω–¥–µ–∫—Å–∞
        image_urls = []
        for _ in range(3):  # –ó–∞–ø—Ä–æ—Å–∏–º —Ç—Ä–∏ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ä—Ç–∏–Ω–∫–∏
            img_url = get_yandex_image_api(country, "")
            if img_url and img_url not in image_urls and is_image_accessible(img_url):
                image_urls.append(img_url)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Ñ–æ—Ç–æ
        if image_urls:
            media_group = [types.InputMediaPhoto(media=url) for url in image_urls]
            media_group[0].caption = answer  # –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º
            await message.answer_media_group(media=media_group)
        else:
            print(f"‚ö† Telegram –Ω–µ —Å–º–æ–≥ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏")
            await message.answer(f"{answer}\n\nüåç [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è](https://yandex.com/images/search?text={urllib.parse.quote(country)})", parse_mode="Markdown")

    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ OpenAI: {e}")
        await message.answer("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
