import openai
from aiogram import Router, types
from magic_filter import F  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from utils.config import OPENAI_API_KEY

# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º API-–∫–ª—é—á OpenAI
openai.api_key = OPENAI_API_KEY

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è (FSM)
class CountryInfoState(StatesGroup):
    waiting_for_country = State()

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üó∫ –£–∑–Ω–∞—Ç—å –æ —Å—Ç—Ä–∞–Ω–µ"
# –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω, –≥–¥–µ —Ç—É—Ä–∏–∑–º –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø–∞—Å–µ–Ω
DANGEROUS_COUNTRIES = [
    "–ê—Ñ–≥–∞–Ω–∏—Å—Ç–∞–Ω", "–°–æ–º–∞–ª–∏", "–°–∏—Ä–∏—è", "–ô–µ–º–µ–Ω", "–°—É–¥–∞–Ω", "–¶–ê–†",
    "–õ–∏–≤–∏—è", "–ò—Ä–∞–∫", "–ü–∞–∫–∏—Å—Ç–∞–Ω", "–°–µ–≤–µ—Ä–Ω–∞—è –ö–æ—Ä–µ—è", "–ú–∞–ª–∏",
    "–ö–æ–Ω–≥–æ", "–ù–∏–≥–µ—Ä", "–Æ–∂–Ω—ã–π –°—É–¥–∞–Ω", "–í–µ–Ω–µ—Å—É—ç–ª–∞"
]

@router.message(F.text == "üó∫ –£–∑–Ω–∞—Ç—å –æ —Å—Ç—Ä–∞–Ω–µ")
async def ask_country(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã, –æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å:")
    await state.set_state(CountryInfoState.waiting_for_country)

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã)
@router.message(CountryInfoState.waiting_for_country)
async def get_country_info(message: types.Message, state: FSMContext):
    country = message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç—Ä–∞–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –æ–ø–∞—Å–Ω—ã—Ö
    warning = ""
    if country in DANGEROUS_COUNTRIES:
        warning = ("‚ö† *–í–Ω–∏–º–∞–Ω–∏–µ!* –≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø–∞—Å–Ω–∞ –¥–ª—è —Ç—É—Ä–∏–∑–º–∞. "
                   "–ü–µ—Ä–µ–¥ –ø–æ–µ–∑–¥–∫–æ–π –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ú–ò–î –∏ –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã.\n\n")

    await message.answer(f"üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ {country}...")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ OpenAI
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã - —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –≥–∏–¥. –†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ —Å—Ç—Ä–∞–Ω—É –∫—Ä–∞—Ç–∫–æ, –Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ."},
                {"role": "user", "content": f"–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ {country}: –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –∫—É–ª—å—Ç—É—Ä–∞, –∫—É—Ö–Ω—è."}
            ]
        )

        answer = response["choices"][0]["message"]["content"]
        await message.answer(f"{warning}üåç {country}:\n\n{answer}", parse_mode="Markdown")

    except Exception as e:
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"–û—à–∏–±–∫–∞ OpenAI: {e}")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–±–æ—Ç –±–æ–ª—å—à–µ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥)
    await state.clear()

